{"version":3,"sources":["logo.svg","frontend/Card/Card.jsx","frontend/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","maxWidth","media","height","MediaCard","details","classes","Card","className","CardActionArea","CardMedia","image","photoUri","title","CardContent","Typography","gutterBottom","variant","style","textDecoration","username","component","name","surname","position","color","description","CardActions","Button","size","Home","useState","usersDetails","setUsersDetails","useEffect","axios","get","then","res","data","catch","err","console","log","message","map","user","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,sNCUrCC,EAAYC,YAAW,CACzBC,KAAM,CACFC,SAAU,KAEdC,MAAO,CACHC,OAAQ,OAID,SAASC,EAAT,GAAiC,IAAZC,EAAW,EAAXA,QAC1BC,EAAUR,IAEhB,OACI,kBAACS,EAAA,EAAD,CAAMC,UAAWF,EAAQN,MACrB,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIF,UAAWF,EAAQJ,MACnBS,MAAON,EAAQO,SACfC,MAAM,0BAEV,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,MAAO,CAAEC,eAAgB,cAC1Dd,EAAQe,UAEb,kBAACL,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKI,UAAU,MAAhD,SACWhB,EAAQiB,MAEnB,kBAACP,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKI,UAAU,MAAhD,YACchB,EAAQkB,SAEtB,kBAACR,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKI,UAAU,MAAhD,SACWhB,EAAQmB,UAEnB,kBAACT,EAAA,EAAD,CAAYE,QAAQ,QAAQQ,MAAM,gBAAgBJ,UAAU,KACvDhB,EAAQqB,eAIrB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQJ,MAAM,WAA3B,SAGA,kBAACG,EAAA,EAAD,CAAQC,KAAK,QAAQJ,MAAM,WAA3B,gBChDhB,IA0BeK,EA1BF,WAAO,IAAD,EAEyBC,mBAAS,MAFlC,mBAERC,EAFQ,KAEMC,EAFN,KAef,OAXAC,qBAAU,WACNC,IACKC,IAAI,sCACJC,MAAK,SAAAC,GACFL,EAAgBK,EAAIC,SAEvBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAIG,cACnC,IAEHF,QAAQC,IAAIX,GAGR,yBAAKxB,UAAU,aAAf,eAEI,wBAAIA,UAAU,WACTwB,EAAeA,EAAaa,KAAI,SAACC,EAAMC,GAAP,OAAiB,wBAAIC,IAAKD,GAAT,IAAkB,kBAAC3C,EAAD,CAAWC,QAASyC,QAAiB,QCP1GG,MAVf,WACE,OACE,yBAAKzC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCEY0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLvB,QAAQuB,MAAMA,EAAMrB,c","file":"static/js/main.f92228cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\n\r\nexport default function MediaCard({ details }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={details.photoUri}\r\n                    title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" style={{ textDecoration: \"underline\" }}>\r\n                        {details.username}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h6\" component=\"h6\">\r\n                        Name: {details.name}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                        Surname: {details.surname}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                        Role: {details.position}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {details.description}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\">\r\n                    Share\r\n        </Button>\r\n                <Button size=\"small\" color=\"primary\">\r\n                    Learn More\r\n        </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MediaCard from './Card/Card'\r\n\r\nconst Home = () => {\r\n\r\n    const [usersDetails, setUsersDetails] = useState(null)\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(\"http://localhost:5000/usersDetails\")\r\n            .then(res => {\r\n                setUsersDetails(res.data)\r\n            })\r\n            .catch(err => console.log(err.message))\r\n    }, [])\r\n\r\n    console.log(usersDetails);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            Hall of fame\r\n            <ul className=\"flexbox\">\r\n                {usersDetails ? usersDetails.map((user, index) => <li key={index} > <MediaCard details={user} /></li>) : null}\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Home from './frontend/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}